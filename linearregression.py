# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDMKlzYjt24HTM2pSDKEdTqBjRdDzwY4
"""

import pandas as pd
from sklearn.datasets import fetch_california_housing
import numpy as np
import matplotlib.pyplot as plt
df = fetch_california_housing()
dataset = pd.DataFrame(df.data)
dataset.columns = df.feature_names
dataset.head()

''' Independent Features and Dependent Features '''

x = dataset
y = df.target

''' Train test split '''

from sklearn.model_selection import train_test_split

# X, y = np.arange(10).reshape((5, 2)), range(5)
x = dataset
y = df.target

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)

print(X_train)


''' Standardizing the datasets '''

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
print(X_train)
print(X_test)

''' If you want to get the previous data of X_train '''

scaler.inverse_transform(X_train)
scaler.inverse_transform(X_test)


''' Linear Regression '''
from sklearn.linear_model import LinearRegression
''' Cross Validation '''
from sklearn.model_selection import cross_val_score
regression = LinearRegression()
regression.fit(X_train, y_train)
mse = cross_val_score(regression, X_train, y_train, scoring='neg_mean_squared_error', cv=5)
np.mean(mse)

''' Prediction '''
reg_predict = regression.predict(X_test)
reg_predict

''' Truth Value '''
import seaborn as sns
sns.displot(reg_predict - y_test, kind='kde')

''' Want to calculate mathematical scor '''

from sklearn.metrics import r2_score
score = r2_score(reg_predict, y_test)
score
'''Output:- 0.3451339380943961'''

